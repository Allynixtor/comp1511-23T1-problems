print('''max_cpu_seconds=3

files=exact_change.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g exact_change.c -o exact_change

command=./exact_change

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest
''')

for i in range(7):
    with open(f"tests/input/input0{i}.txt") as f:
        inp = f.read()
    print(f"{i+1} stdin=\"{repr(inp)[1:-1]}\"")

print('''
## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:

### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
''')

for i in range(7):
    with open(f"tests/output/output0{i}.txt") as f:
        oup = f.read()
    print(f"{i+1} expected_stdout=\"{repr(oup)[1:-1]}\"")